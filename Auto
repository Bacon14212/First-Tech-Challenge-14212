package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@Autonomous
public class League_Auto extends LinearOpMode {


    public DcMotor Lift = null;
    public DcMotor frontLeft = null;
    public DcMotor backLeft = null;
    public DcMotor frontRight = null;
    public DcMotor backRight = null;
    public Servo Claw = null;
    private ElapsedTime runtime = new ElapsedTime();

    double clawOffset = 0;
    double liftOffset = 0;

    public static final double MID_LIFT = 0.02;
    public static final double MID_SERVO = 1;
    public static final double CLAW_SPEED = 1;
    static final double FORWARD_SPEED = 0.6;
    static final double TURN_SPEED = 0.5;

    @Override
    public void runOpMode() {

        // Initialize the drive system variables.
        frontLeft = hardwareMap.dcMotor.get("frontLeft");
        backLeft = hardwareMap.dcMotor.get("backLeft");
        frontRight = hardwareMap.dcMotor.get("frontRight");
        backRight = hardwareMap.dcMotor.get("backRight");
        Lift = hardwareMap.dcMotor.get("Lift");
        Claw = hardwareMap.servo.get("Claw");


        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("Status", "Ready to run");    //
        telemetry.update();

        // Wait for the game to start (driver presses PLAY)
        waitForStart();


        clawOffset = Range.clip(clawOffset, -0.5, 0.5);
        Claw.setPosition(MID_SERVO + clawOffset);


        clawOffset -= CLAW_SPEED;
        frontLeft.setPower(-FORWARD_SPEED);
        backLeft.setPower(FORWARD_SPEED);
        frontRight.setPower(-FORWARD_SPEED);
        backRight.setPower(FORWARD_SPEED);
        runtime.reset();
        while (opModeIsActive() && (runtime.seconds() < 1)) {
            telemetry.addData("Path", "Leg 1: %4.1f S Elapsed", runtime.seconds());
            telemetry.update();
        }
        frontLeft.setPower(-TURN_SPEED);
        frontRight.setPower(-TURN_SPEED);
        backLeft.setPower(TURN_SPEED);
        backRight.setPower(TURN_SPEED);
        runtime.reset();
        while (opModeIsActive() && (runtime.seconds() < 1)) {
            telemetry.addData("Path", "Leg 2: %4.1f S Elapsed", runtime.seconds());
            telemetry.update();

            Lift.setPower(1);
            runtime.reset();
            while (opModeIsActive() && (runtime.seconds() < 3)) {
                telemetry.addData("Path", "Leg 3: %4.1f S Elapsed", runtime.seconds());
                telemetry.update();
            }

            clawOffset += CLAW_SPEED;
            runtime.reset();
            while (opModeIsActive() && (runtime.seconds() < 0.5)) {
                telemetry.addData("Path", "Leg 4: %4.1f S Elapsed", runtime.seconds());
                telemetry.update();
            }


            Lift.setPower(-1);
            runtime.reset();
            while (opModeIsActive() && (runtime.seconds() < 3)) {
                telemetry.addData("Path", "Leg 4: %4.1f S Elapsed", runtime.seconds());
                telemetry.update();
            }


            // Step 4:  Stop
            frontLeft.setPower(0);
            backLeft.setPower(0);
            frontRight.setPower(0);
            backRight.setPower(0);

            telemetry.addData("Path", "Complete");
            telemetry.update();
            sleep(1000);
        }
    }
}
